https://www.hackerrank.com/challenges/sherlock-and-cost/problem

#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
int main()
{
	int t(0);
	cin >> t;
	while (t--)
	{
		int n(0);
		cin >> n;
		// A[][0] is a case which has mimimum value of B[i], 1, and A[][1] has maximum value of B[i], B[i].
		std::vector<std::vector<int>> A(n+1, std::vector<int>(2, 0));
		std::vector<int> B(n+1);
		for (int i = 1; i <= n; i++)
		{
			cin >> B[i];
		}

		for (int i = 2; i <= n; ++i)
		{
			// there are 4 cases.
			// 1. i-1 = 1 and i = 1
			// 2. i-1 = 1 and i = B[i]
			// 3. i-1 = B[i-1] and i = 1
			// 4. i-1 = B[i-1] and i = B[i]
			// find max among them.
			A[i][0] = max(A[i-1][0], A[i-1][1] + abs(B[i-1]-1));
			A[i][1] = max(A[i-1][0] + abs(B[i]-1), A[i-1][1] + abs(B[i] - B[i-1]));
		}

		cout << max(A[n][0], A[n][1]) << endl;
	}
}
