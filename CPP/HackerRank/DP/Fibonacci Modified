https://www.hackerrank.com/challenges/fibonacci-modified/problem
Could not pass the test with c++ due to time limits
Algorithm itself is easy but taking care of big integers are hard.


#include <vector>
#include <iostream>
#include <math.h>
#include <string>
using namespace std;

std::string StrPlus(std::string str1, std::string str2);
std::string StrPow(std::string str1, int n);

int main()
{
	std::string t1(""), t2("");
	int n(0);
	cin >> t1 >> t2 >> n;
	std::vector<std::string> fibo(n + 1);

	fibo[1] = t1;
	fibo[2] = t2;
	for (int i = 3; i <= n; ++i)
	{
		fibo[i] = StrPlus(fibo[i - 2], StrPow(fibo[i - 1], 2));
	}
	cout << fibo[n] << endl;
}

std::string StrPlus(std::string str1, std::string str2)
{
	int lastPos1 = str1.size() - 1;
	int lastPos2 = str2.size() - 1;
	std::string sum;
	int size = lastPos1 > lastPos2 ? lastPos1 + 2 : lastPos2 + 2;
	sum.resize(size, '0');

	int tempSize = size - 1;
	while (lastPos1 >= 0)
	{
		sum[tempSize--] = str1[lastPos1--];
	}

	tempSize = size - 1;
	while (lastPos2 >= 0)
	{
		int a = str2[lastPos2--] - '0';
		if ((sum[tempSize] - '0') + a >= 10)
		{
			sum[tempSize] = '0' + ((sum[tempSize] - '0') + a - 10);
			sum[tempSize - 1] = '0' + ((sum[tempSize - 1] - '0') + 1);
			tempSize--;
		}
		else
		{
			sum[tempSize] = '0' + ((sum[tempSize] - '0') + a);
			tempSize--;
		}
	}

	if (sum[0] == '0')
		sum = sum.substr(1, sum.size() - 1);
	return sum;
}

std::string StrPow(std::string str1, int n)
{
	std::string sum;
	std::string target;
	while (str1 != target)
	{
		target = StrPlus(target, "1");
		sum = StrPlus(sum, str1);
	}
	return sum;
}



----------------------------------------------------------
sonle_hut's better solution yet cannot pass the tests
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

namespace
{
    char toChar(char d) {
        return d | 0x30;
    }
}

constexpr unsigned Base = 100;

class BigNumber
{
private:
    string m_num;

public:
    BigNumber(int num = 0);
    BigNumber(const BigNumber& other);
    BigNumber(BigNumber&& other);
    BigNumber& operator+=(const BigNumber& num2);
    void swap(BigNumber& num);

    BigNumber& operator=(BigNumber num);

    friend BigNumber operator*(const BigNumber& num1, const BigNumber& num2);
    friend BigNumber operator+(BigNumber num1, const BigNumber& num2);
    friend ostream& operator<<(ostream& outstream, const BigNumber& num);

private:
    void add(const BigNumber& num, int exp);
};

BigNumber::BigNumber(int num)
{
    for (; num; num /= Base) {
        m_num.push_back(num % Base);
    }
    if (m_num.empty()) {
        m_num.push_back(0);
    }
}

BigNumber::BigNumber(const BigNumber& other)
    : m_num(other.m_num)
{ }

BigNumber::BigNumber(BigNumber&& other)
    : m_num(std::move(other.m_num))
{ }

BigNumber operator*(const BigNumber& num1, const BigNumber& num2)
{
    BigNumber precomp[Base];
    for (int i = 1; i < Base; ++i) {
        precomp[i] = precomp[i - 1] + num1;
    }

    BigNumber result;
    int exp = 0;
    for_each(num2.m_num.begin(), num2.m_num.end(), [&result, &precomp, &exp](char c) {
        result.add(precomp[c], exp++);
        });
    return result;
}

void BigNumber::add(const BigNumber& num, int exp)
{
    if (exp > m_num.size()) {
        m_num.append(exp - m_num.size(), 0).append(num.m_num.begin(), num.m_num.end());
    }
    else {
        auto b1 = m_num.begin() + exp, e1 = m_num.end();
        auto b2 = num.m_num.begin(), e2 = num.m_num.end();

        int r = 0;
        for (; b1 != e1 && b2 != e2; ++b1, ++b2, r /= Base) {
            r += *b1 + *b2;
            *b1 = r % Base;
        }

        for (; r && b1 != e1; ++b1, r /= Base) {
            r += *b1;
            *b1 = r % Base;
        }

        for (; r && b2 != e2; ++b2, r /= Base) {
            r += *b2;
            m_num.push_back(r % Base);
        }

        if (b2 != e2) {
            m_num.append(b2, e2);
        }

        if (r) {
            m_num.push_back(r);
        }
    }
}

BigNumber& BigNumber::operator+=(const BigNumber& num2)
{
    add(num2, 0);
    return *this;
}

BigNumber operator+(BigNumber num1, const BigNumber& num2)
{
    num1.add(num2, 0);
    return num1;
}

ostream& operator<<(ostream& outstream, const BigNumber& num)
{
    string x(num.m_num.size() * 2, 0);
    for (int i = 0; i < num.m_num.size(); ++i) {
        auto d = num.m_num[i];
        x[2 * i] = toChar(d % 10);
        x[2 * i + 1] = toChar(d / 10);
    }
    if (x.back() == '0') {
        x.erase(x.size() - 1);
    }
    reverse(x.begin(), x.end());
    return outstream << x;
}

BigNumber& BigNumber::operator=(BigNumber num) {
    m_num = std::move(num.m_num);
    return *this;
}

void BigNumber::swap(BigNumber& num)
{
    m_num.swap(num.m_num);
}

int main() {
    int _a, _b, n;
    cin >> _a >> _b >> n;

    BigNumber a(_a), b(_b);
    while (n-- > 2) {
        a += b * b;
        a.swap(b);
    }

    cout << b;
    return 0;
}








--------------------------
simple java code 

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the fibonacciModified function below.
	static String fibonacciModified(int t1, int t2, int n) {
        BigInteger[] arr = new BigInteger[n];
        BigInteger tOne = new BigInteger(Integer.toString(t1));
        BigInteger tTwo = new BigInteger(Integer.toString(t2));
        arr[0] = tOne;
        arr[1] = tTwo;
        for(int i = 2; i < n; i++){
            BigInteger iMinus1BigInteger = arr[i - 1];
            BigInteger iMinus2BigInteger = arr[i - 2];
            BigInteger powered = iMinus1BigInteger.pow(2);
            BigInteger poweredAndSum = powered.add(iMinus2BigInteger);
            arr[i] = poweredAndSum;
        }
        BigInteger result = arr[n-1];
        return result.toString();
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] t1T2n = scanner.nextLine().split(" ");

        int t1 = Integer.parseInt(t1T2n[0]);

        int t2 = Integer.parseInt(t1T2n[1]);

        int n = Integer.parseInt(t1T2n[2]);

        String result = fibonacciModified(t1, t2, n);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
