https://algospot.com/judge/problem/read/BOGGLE#

#include <vector>
#include <iostream>
#include <string>


void DFS(std::vector<std::string>& board, std::string& word, int startingRow, int startingCol, int wordIndex, int letterIndex);

std::vector<bool> hasFound;

int dx[8] = {1, 1, 1, -1, -1, -1, 0, 0};
int dy[8] = {1, 0, -1, 1, 0, -1, 1, -1};

int main()
{
    int t(0);
    std::cin >> t;
    while (t--)
    {
        std::vector<std::string> board(5);
        for (int i = 0; i < 5; ++i)
        {
            std::cin >> board[i];
        }

        int n(0);
        std::cin >> n;
        std::vector<std::string> words(n);
        hasFound.clear();
        hasFound.resize(n, false);

        for (int i = 0; i < n; ++i)
        {
            std::cin >> words[i];
        }


        for (int k = 0; k < n; ++k)
        {
            for (int i = 0; i < 5; ++i)
            {
                for (int j = 0; j < 5; ++j)
                {
                    if (words[k][0] == board[i][j])
                    {
                        DFS(board, words[k], i, j, k, 1);
                    }
                }
            }
        }

        for (int i = 0; i < n; ++i)
        {
            std::cout << words[i] << ' ';
            if (hasFound[i])
                std::cout << "YES" << std::endl;
            else
                std::cout << "NO" << std::endl;
        }
    }
}

void DFS(std::vector<std::string>& board, std::string& word, int startingRow, int startingCol, int wordIndex, int letterIndex)
{
    if (hasFound[wordIndex])
        return;

    if (letterIndex == word.size())
    {
        hasFound[wordIndex] = true;
        return;
    }

    for (int i = 0; i < 8; ++i)
    {
        int newRow = startingRow + dx[i];
        int newCol = startingCol + dy[i];

        if (!((0 <= newRow && newRow < 5) && (0 <= newCol && newCol < 5)))
            continue;

        if (word[letterIndex] == board[newRow][newCol])
        {
            DFS(board, word, newRow, newCol, wordIndex, letterIndex + 1);
        }
    }
}
