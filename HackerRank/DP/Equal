https://www.hackerrank.com/challenges/equal/problem

#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int FindMinOps(std::vector<int> numChocos)
{
	// giving chocolates to all but one equals to take away chocolates from the one
	// In this case, everyone gets equal chocolate when everyone gest zero chocolates.
	int min = numChocos[0];
	for (int& i : numChocos)
		i -= min;

	int numOps(0);
	// every number can be composed with 1, 2, 5 within 3 addition. 8 = 5 + 2 + 1
	for (int i = 0; i < 3; ++i)
	{
		for (int& j : numChocos)
		{
			if (j >= 5)
			{
				// if j = 12, numOps = 2 and j will be 2
				numOps += j / 5;
				j -= 5 * (j / 5);
			}
			else if (j >= 2)
			{
				numOps += j / 2;
				j -= 2 * (j / 2);
			}
			else if (j == 1)
			{
				numOps++;
				j -= 1;
			}
		}
	}
	return numOps;
}

int main()
{
	int t(0);
	cin >> t;
	while (t--)
	{
		int n(0);
		cin >> n;
		std::vector<int> numChocos(n);
		for (int& i : numChocos)
			cin >> i;
		std::sort(numChocos.begin(), numChocos.end());
		// FindMinOps function always give chocolates to a person who has minimum number of chocolate.
		// However, there are cases when not giving chocolates to the person assures better performance.
		// ex) 1, 5, 5
		auto numChocos2 = numChocos;
		numChocos2[0] -= 1;
		auto numChocos3 = numChocos;
		numChocos3[0] -= 2;

		int min1 = FindMinOps(numChocos);
		int min2 = FindMinOps(numChocos2); 
		int min3 = FindMinOps(numChocos3);
		cout << min(min(min1, min2+1), min3 + 1) << endl;
	}

}
